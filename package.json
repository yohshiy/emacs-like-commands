{
	"name": "emacs-like-commands",
	"displayName": "Emacs like commands",
	"description": "Emacs like commands with multi cursor support, improved mark-mode experience, clipboard and kill-ring integration, lots of improvements and bug fixes",
	"version": "0.14.1",
	"publisher": "tuttieee",
	"repository": {
		"type": "git",
		"url": "https://github.com/yohshiy/emacs-like-commands"
	},
	"engines": {
		"vscode": "^1.42.0"
	},
	"categories": [
		"Other"
	],
	"license": "MIT",
	"icon": "images/icon.png",
	"keywords": [
		"emacs",
		"keybindings",
		"multi cursor",
		"selection",
		"mark mode"
	],
	"activationEvents": [
		"*"
	],
	"extensionKind": [
		"ui"
	],
	"main": "./out/extension.js",
	"contributes": {
		"configuration": {
			"type": "object",
			"title": "Awesome Emacs Keymap (emacs-mcx) configuration",
			"properties": {
				"emacs-mcx.killRingMax": {
					"type": "number",
					"default": 60,
					"description": "Maximum number of Kill ring entries"
				},
				"emacs-mcx.strictEmacsMove": {
					"type": "boolean",
					"default": false,
					"description": "Simulate strictly the original emacs's cursor movements or preserve VSCode's native ones"
				},
				"emacs-mcx.debug.silent": {
					"type": "boolean",
					"description": "If true, all logs are suppressed.",
					"default": false
				},
				"emacs-mcx.debug.loggingLevelForAlert": {
					"type": "string",
					"description": "Maximum level of messages to present as VS Code information window.",
					"default": "error",
					"enum": [
						"error",
						"warn",
						"info",
						"verbose",
						"debug",
						"silly"
					]
				},
				"emacs-mcx.debug.loggingLevelForConsole": {
					"type": "string",
					"description": "Maximum level of messages to log to console. Logs are visible in developer tools.",
					"default": "error",
					"enum": [
						"error",
						"warn",
						"info",
						"verbose",
						"debug",
						"silly"
					]
				}
			}
		},
		"commands": [
			{
				"title": "Emacs forward-char",
				"command": "emacs-mcx.forwardChar",
				"when": "editorTextFocus"
			},
			{
				"title": "Emacs forward-char",
				"command": "emacs-mcx.forwardChar",
				"when": "terminalFocus"
			},
			{
				"title": "Emacs backward-char",
				"command": "emacs-mcx.backwardChar",
				"when": "editorTextFocus"
			},
			{
				"title": "Emacs backward-char",
				"command": "emacs-mcx.backwardChar",
				"when": "terminalFocus"
			},
			{
				"title": "Emacs previous-line",
				"command": "emacs-mcx.previousLine",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"title": "Emacs previous-line",
				"command": "emacs-mcx.previousLine",
				"when": "terminalFocus"
			},
			{
				"title": "Emacs next-line",
				"command": "emacs-mcx.nextLine",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"title": "Emacs next-line",
				"command": "emacs-mcx.nextLine",
				"when": "terminalFocus"
			},
			{
				"title": "Emacs beginning-of-line",
				"command": "emacs-mcx.moveBeginningOfLine",
				"when": "editorTextFocus"
			},
			{
				"title": "Emacs beginning-of-line",
				"command": "emacs-mcx.moveBeginningOfLine",
				"when": "terminalFocus"
			},
			{
				"title": "Emacs end-of-line",
				"command": "emacs-mcx.moveEndOfLine",
				"when": "editorTextFocus"
			},
			{
				"title": "Emacs end-of-line",
				"command": "emacs-mcx.moveEndOfLine",
				"when": "terminalFocus"
			},
			{
				"title": "Emacs alt+f",
				"command": "emacs-mcx.forwardWord",
				"when": "editorTextFocus"
			},
			{
				"title": "Emacs alt+b",
				"command": "emacs-mcx.backwardWord",
				"when": "editorTextFocus"
			},
			{
				"title": "Emacs scroll-up-command",
				"command": "emacs-mcx.scrollUpCommand",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"title": "Emacs scroll-down-command",
				"command": "emacs-mcx.scrollDownCommand",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"title": "Emacs end-of-buffer",
				"command": "emacs-mcx.endOfBuffer",
				"when": "editorTextFocus"
			},
			{
				"title": "Emacs begginning-of-buffer",
				"command": "emacs-mcx.beginningOfBuffer",
				"when": "editorTextFocus"
			},
			{
				"title": "Emacs recenter",
				"command": "emacs-mcx.recenterTopBottom",
				"when": "editorTextFocus"
			},
			{
				"title": "Emacs ctrl+alt+n",
				"command": "emacs-mcx.addSelectionToNextFindMatch",
				"when": "editorFocus"
			},
			{
				"title": "Emacs ctrl+alt+p",
				"command": "emacs-mcx.addSelectionToPreviousFindMatch",
				"when": "editorFocus"
			},
			{
				"title": "Emacs delete-backward-char",
				"command": "emacs-mcx.deleteBackwardChar",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"title": "Emacs kill-word",
				"command": "emacs-mcx.killWord",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"title": "Emacs backward-kill-word",
				"command": "emacs-mcx.backwardKillWord",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"title": "Emacs kill-line",
				"command": "emacs-mcx.killLine",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"title": "Emacs ctrl+shift+backspace",
				"command": "emacs-mcx.killWholeLine",
				"when": "editorTextFocus"
			},
			{
				"title": "Emacs kill-region",
				"command": "emacs-mcx.killRegion",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"title": "Emacs copy-region",
				"command": "emacs-mcx.copyRegion",
				"when": "editorTextFocus"
			},
			{
				"title": "Emacs yank",
				"command": "emacs-mcx.yank",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"title": "Emacs yank-pop",
				"command": "emacs-mcx.yank-pop",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"title": "Emacs newline",
				"command": "emacs-mcx.newLine",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"title": "Emacs delete-blank-lines",
				"command": "emacs-mcx.deleteBlankLines",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"title": "Emacs downcase-word",
				"command": "emacs-mcx.transformToLowercase",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"title": "Emacs upcase-word",
				"command": "emacs-mcx.transformToUppercase",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"title": "Emacs cancel",
				"command": "emacs-mcx.cancel",
				"when": "editorTextFocus && editorHasSelection"
			},
			{
				"title": "Emacs cancel",
				"command": "emacs-mcx.cancel",
				"when": "editorTextFocus && editorHasMultipleSelections"
			},
			{
				"title": "Emacs cancel",
				"command": "emacs-mcx.cancel",
				"when": "editorTextFocus"
			},
			{
				"title": "Emacs set-mark-command",
				"command": "emacs-mcx.setMarkCommand",
				"when": "editorTextFocus"
			},
			{
				"title": "Emacs universal-argument",
				"command": "emacs-mcx.universalArgument",
				"when": "editorTextFocus"
			},
			{
				"title": "Emacs ctrl+alt+f",
				"command": "emacs-mcx.paredit.forwardSexp",
				"when": "editorTextFocus"
			},
			{
				"title": "Emacs ctrl+alt+b",
				"command": "emacs-mcx.paredit.backwardSexp",
				"when": "editorTextFocus"
			},
			{
				"title": "Insert key char.",
				"command": "el-cmds.insertKeyChar"
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "yarn run compile",
		"prettier": "prettier --write 'src/**/*.ts'",
		"compile": "tsc -p ./",
		"lint": "eslint src --ext ts",
		"watch": "tsc -watch -p ./",
		"pretest": "yarn run compile && yarn run lint",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/glob": "^7.1.1",
		"@types/mocha": "^7.0.1",
		"@types/node": "^13.7.4",
		"@types/vscode": "^1.42.0",
		"@typescript-eslint/eslint-plugin": "^2.18.0",
		"@typescript-eslint/parser": "^2.18.0",
		"eslint": "^6.8.0",
		"eslint-config-prettier": "^6.10.0",
		"eslint-plugin-prettier": "^3.1.2",
		"glob": "^7.1.6",
		"mocha": "^7.0.1",
		"prettier": "^1.19.1",
		"typescript": "^3.8.2",
		"vscode-test": "^1.3.0"
	},
	"dependencies": {
		"clipboardy": "^2.2.0",
		"paredit.js": "^0.3.4",
		"winston": "^3.2.1",
		"winston-console-for-electron": "^0.0.6"
	}
}
